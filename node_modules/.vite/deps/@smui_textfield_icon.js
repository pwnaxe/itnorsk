import {
  MDCTextFieldIconFoundation
} from "./chunk-QH3M5PNC.js";
import {
  classMap,
  dispatch,
  forwardEventsBuilder,
  useActions
} from "./chunk-DXJYLXNN.js";
import "./chunk-OFMGJFNJ.js";
import "./chunk-ZCLB3LDK.js";
import "./chunk-TDRWH72F.js";
import "./chunk-X7HCJ7ZS.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  assign,
  binding_callbacks,
  check_outros,
  children,
  claim_element,
  claim_text,
  component_subscribe,
  compute_rest_props,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  getContext,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_update,
  group_outros,
  init,
  insert_hydration_dev,
  is_function,
  noop,
  onMount,
  run_all,
  safe_not_equal,
  set_attributes,
  set_data_dev,
  text,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-IS3EQ5Z3.js";
import "./chunk-XSLCAIPP.js";
import "./chunk-7U33LM2Z.js";

// node_modules/@smui/textfield/dist/icon/Icon.svelte
var file = "node_modules\\@smui\\textfield\\dist\\icon\\Icon.svelte";
function create_else_block(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text(
        /*content*/
        ctx[7]
      );
    },
    l: function claim(nodes) {
      t = claim_text(
        nodes,
        /*content*/
        ctx[7]
      );
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, t, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*content*/
      128)
        set_data_dev(
          t,
          /*content*/
          ctx2[7]
        );
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(16:32) {:else}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[15].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[14],
    null
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16384)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[14],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[14]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[14],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(16:3) {#if content == null}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let i;
  let current_block_type_index;
  let if_block;
  let i_class_value;
  let i_aria_hidden_value;
  let i_aria_disabled_value;
  let useActions_action;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*content*/
      ctx2[7] == null
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let i_levels = [
    {
      class: i_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-text-field__icon": true,
        "mdc-text-field__icon--leading": (
          /*leading*/
          ctx[11]
        ),
        "mdc-text-field__icon--trailing": !/*leading*/
        ctx[11]
      })
    },
    {
      "aria-hidden": i_aria_hidden_value = /*tabindex*/
      ctx[3] === -1 ? "true" : "false"
    },
    {
      "aria-disabled": i_aria_disabled_value = /*role*/
      ctx[2] === "button" ? (
        /*disabled*/
        ctx[4] ? "true" : "false"
      ) : void 0
    },
    /*roleProps*/
    ctx[8],
    /*internalAttrs*/
    ctx[6],
    /*$$restProps*/
    ctx[12]
  ];
  let i_data = {};
  for (let i2 = 0; i2 < i_levels.length; i2 += 1) {
    i_data = assign(i_data, i_levels[i2]);
  }
  const block = {
    c: function create() {
      i = element("i");
      if_block.c();
      this.h();
    },
    l: function claim(nodes) {
      i = claim_element(nodes, "I", {
        class: true,
        "aria-hidden": true,
        "aria-disabled": true
      });
      var i_nodes = children(i);
      if_block.l(i_nodes);
      i_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(i, i_data);
      add_location(i, file, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, i, anchor);
      if_blocks[current_block_type_index].m(i, null);
      ctx[16](i);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            i,
            /*use*/
            ctx[0]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[9].call(null, i))
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(i, null);
      }
      set_attributes(i, i_data = get_spread_update(i_levels, [
        (!current || dirty & /*className*/
        2 && i_class_value !== (i_class_value = classMap({
          [
            /*className*/
            ctx2[1]
          ]: true,
          "mdc-text-field__icon": true,
          "mdc-text-field__icon--leading": (
            /*leading*/
            ctx2[11]
          ),
          "mdc-text-field__icon--trailing": !/*leading*/
          ctx2[11]
        }))) && { class: i_class_value },
        (!current || dirty & /*tabindex*/
        8 && i_aria_hidden_value !== (i_aria_hidden_value = /*tabindex*/
        ctx2[3] === -1 ? "true" : "false")) && { "aria-hidden": i_aria_hidden_value },
        (!current || dirty & /*role, disabled*/
        20 && i_aria_disabled_value !== (i_aria_disabled_value = /*role*/
        ctx2[2] === "button" ? (
          /*disabled*/
          ctx2[4] ? "true" : "false"
        ) : void 0)) && { "aria-disabled": i_aria_disabled_value },
        dirty & /*roleProps*/
        256 && /*roleProps*/
        ctx2[8],
        dirty & /*internalAttrs*/
        64 && /*internalAttrs*/
        ctx2[6],
        dirty & /*$$restProps*/
        4096 && /*$$restProps*/
        ctx2[12]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(i);
      }
      if_blocks[current_block_type_index].d();
      ctx[16](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance_1($$self, $$props, $$invalidate) {
  let roleProps;
  const omit_props_names = ["use", "class", "role", "tabindex", "disabled", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $leadingStore;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Icon", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { role = void 0 } = $$props;
  let { tabindex = role === "button" ? 0 : -1 } = $$props;
  let { disabled = false } = $$props;
  let element2;
  let instance;
  let internalAttrs = {};
  const leadingStore = getContext("SMUI:textfield:icon:leading");
  validate_store(leadingStore, "leadingStore");
  component_subscribe($$self, leadingStore, (value) => $$invalidate(18, $leadingStore = value));
  const leading = $leadingStore;
  let content = void 0;
  onMount(() => {
    instance = new MDCTextFieldIconFoundation({
      getAttr,
      setAttr: addAttr,
      removeAttr,
      setContent: (value) => {
        $$invalidate(7, content = value);
      },
      registerInteractionHandler: (evtType, handler) => getElement().addEventListener(evtType, handler),
      deregisterInteractionHandler: (evtType, handler) => getElement().removeEventListener(evtType, handler),
      notifyIconAction: () => dispatch(getElement(), "SMUITextField:icon", void 0, void 0, true)
    });
    dispatch(
      getElement(),
      leading ? "SMUITextfieldLeadingIcon:mount" : "SMUITextfieldTrailingIcon:mount",
      instance
    );
    instance.init();
    return () => {
      dispatch(
        getElement(),
        leading ? "SMUITextfieldLeadingIcon:unmount" : "SMUITextfieldTrailingIcon:unmount",
        instance
      );
      instance.destroy();
    };
  });
  function getAttr(name) {
    var _a;
    return name in internalAttrs ? (_a = internalAttrs[name]) !== null && _a !== void 0 ? _a : null : getElement().getAttribute(name);
  }
  function addAttr(name, value) {
    if (internalAttrs[name] !== value) {
      $$invalidate(6, internalAttrs[name] = value, internalAttrs);
    }
  }
  function removeAttr(name) {
    if (!(name in internalAttrs) || internalAttrs[name] != null) {
      $$invalidate(6, internalAttrs[name] = void 0, internalAttrs);
    }
  }
  function getElement() {
    return element2;
  }
  function i_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(5, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("role" in $$new_props)
      $$invalidate(2, role = $$new_props.role);
    if ("tabindex" in $$new_props)
      $$invalidate(3, tabindex = $$new_props.tabindex);
    if ("disabled" in $$new_props)
      $$invalidate(4, disabled = $$new_props.disabled);
    if ("$$scope" in $$new_props)
      $$invalidate(14, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    MDCTextFieldIconFoundation,
    onMount,
    getContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    useActions,
    dispatch,
    forwardEvents,
    use,
    className,
    role,
    tabindex,
    disabled,
    element: element2,
    instance,
    internalAttrs,
    leadingStore,
    leading,
    content,
    getAttr,
    addAttr,
    removeAttr,
    getElement,
    roleProps,
    $leadingStore
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("role" in $$props)
      $$invalidate(2, role = $$new_props.role);
    if ("tabindex" in $$props)
      $$invalidate(3, tabindex = $$new_props.tabindex);
    if ("disabled" in $$props)
      $$invalidate(4, disabled = $$new_props.disabled);
    if ("element" in $$props)
      $$invalidate(5, element2 = $$new_props.element);
    if ("instance" in $$props)
      instance = $$new_props.instance;
    if ("internalAttrs" in $$props)
      $$invalidate(6, internalAttrs = $$new_props.internalAttrs);
    if ("content" in $$props)
      $$invalidate(7, content = $$new_props.content);
    if ("roleProps" in $$props)
      $$invalidate(8, roleProps = $$new_props.roleProps);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*role, tabindex*/
    12) {
      $:
        $$invalidate(8, roleProps = { role, tabindex });
    }
  };
  return [
    use,
    className,
    role,
    tabindex,
    disabled,
    element2,
    internalAttrs,
    content,
    roleProps,
    forwardEvents,
    leadingStore,
    leading,
    $$restProps,
    getElement,
    $$scope,
    slots,
    i_binding
  ];
}
var Icon = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance_1, create_fragment, safe_not_equal, {
      use: 0,
      class: 1,
      role: 2,
      tabindex: 3,
      disabled: 4,
      getElement: 13
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Icon",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get role() {
    throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set role(value) {
    throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get tabindex() {
    throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set tabindex(value) {
    throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value) {
    throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[13];
  }
  set getElement(value) {
    throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Icon_default = Icon;

// node_modules/@smui/textfield/dist/icon/index.js
var icon_default = Icon_default;
export {
  icon_default as default
};
//# sourceMappingURL=@smui_textfield_icon.js.map
